
(:patch
 (:om-version 0.04)
 (:name "midi-events")
 (:doc "")
 (:info
  (:created "2019/09/28 15:18:28")
  (:modified "2019/09/28 21:54:50"))
 (:window (:size (927 784)) (:position (473 68)))
 (:grid nil)
 (:lock nil)
 (:boxes
  (:box
   (:type :object)
   (:reference midievent)
   (:group-id nil)
   (:name "MIDIEVENT 2")
   (:x 621)
   (:y 479)
   (:w 97)
   (:h 80)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:name "MIDIEVENT 2")
   (:display :text)
   (:showname nil)
   (:group-id nil)
   (:lock :locked)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "EV-TYPE")
     (:value :progchange)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "EV-CHAN")
     (:value 1)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "EV-PORT")
     (:value 0)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "EV-VALUE")
     (:value 0)
     (:reactive nil)))
   (:outputs
    (:output (:name "SELF") (:reactive nil))
    (:output (:name "EV-TYPE") (:reactive nil))
    (:output (:name "EV-CHAN") (:reactive nil))
    (:output (:name "EV-PORT") (:reactive nil))
    (:output (:name "EV-VALUE") (:reactive nil)))
   (:window (:size (nil nil)) (:position (nil nil)))
   (:edition-params)
   (:value
    (:object
     (:class midievent)
     (:slots
      ((:onset 2046)
       (:item-time nil)
       (:item-internal-time nil)
       (:item-type nil)
       (:attributes nil)
       (:ev-type :progchange)
       (:ev-chan 1)
       (:ev-port 0)
       (:ev-value 56)))
     (:add-slots ((:ev-track 0)))))
   (:id 0))
  (:box
   (:type :object)
   (:reference midievent)
   (:group-id nil)
   (:name "MIDIEVENT 2")
   (:x 504)
   (:y 479)
   (:w 80)
   (:h 83)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:name "MIDIEVENT 2")
   (:display :text)
   (:showname nil)
   (:group-id nil)
   (:lock :locked)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "EV-TYPE")
     (:value :progchange)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "EV-CHAN")
     (:value 1)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "EV-PORT")
     (:value 0)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "EV-VALUE")
     (:value 0)
     (:reactive nil)))
   (:outputs
    (:output (:name "SELF") (:reactive nil))
    (:output (:name "EV-TYPE") (:reactive nil))
    (:output (:name "EV-CHAN") (:reactive nil))
    (:output (:name "EV-PORT") (:reactive nil))
    (:output (:name "EV-VALUE") (:reactive nil)))
   (:window (:size (nil nil)) (:position (nil nil)))
   (:edition-params)
   (:value
    (:object
     (:class midievent)
     (:slots
      ((:onset 0)
       (:item-time nil)
       (:item-internal-time nil)
       (:item-type nil)
       (:attributes nil)
       (:ev-type :progchange)
       (:ev-chan 1)
       (:ev-port 0)
       (:ev-value 12)))
     (:add-slots ((:ev-track 0)))))
   (:id 1))
  (:box
   (:type :abstraction)
   (:reference
    (:maquette
     (:om-version 0.04)
     (:name "maquette")
     (:doc "")
     (:info (:created nil) (:modified nil))
     (:window (:size (1175 586)) (:position (88 126)))
     (:grid nil)
     (:lock nil)
     (:boxes
      (:box
       (:type :object)
       (:reference chord-seq)
       (:group-id 1)
       (:name nil)
       (:x 100)
       (:y 33)
       (:w 10000)
       (:h 40)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:name nil)
       (:display :mini-view)
       (:showname nil)
       (:show-markers t)
       (:group-id 1)
       (:lock :locked)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "SELF")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "LMIDIC")
         (:value (:list (:list 6000)))
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "LONSET")
         (:value (:list 0 1000))
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "LDUR")
         (:value (:list (:list 1000)))
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "LVEL")
         (:value 100)
         (:reactive nil)))
       (:outputs
        (:output (:name "SELF") (:reactive nil))
        (:output (:name "LMIDIC") (:reactive nil))
        (:output (:name "LONSET") (:reactive nil))
        (:output (:name "LDUR") (:reactive nil))
        (:output (:name "LVEL") (:reactive nil)))
       (:window (:size (nil nil)) (:position (nil nil)))
       (:edition-params)
       (:value
        (:object
         (:class chord-seq)
         (:slots
          ((:onset 100)
           (:duration 10000)
           (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))
           (:symbolic-date nil)
           (:symbolic-dur nil)
           (:symbolic-dur-extent 0)
           (:lmidic
            (:list
             (:list 6000)
             (:list 6200)
             (:list 6300)
             (:list 6500)
             (:list 6700)
             (:list 6800)
             (:list 6900)
             (:list 7100)
             (:list 7300)
             (:list 7500)))
           (:lonset
            (:list
             0
             1000
             2000
             3000
             4000
             5000
             6000
             7000
             8000
             9000
             10000))
           (:ldur
            (:list
             (:list 1000)
             (:list 1000)
             (:list 1000)
             (:list 1000)
             (:list 1000)
             (:list 1000)
             (:list 1000)
             (:list 1000)
             (:list 1000)
             (:list 1000)))
           (:lvel
            (:list
             (:list 90)
             (:list 90)
             (:list 90)
             (:list 90)
             (:list 90)
             (:list 90)
             (:list 90)
             (:list 90)
             (:list 90)
             (:list 90)))
           (:loffset
            (:list
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)))
           (:lchan
            (:list
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)))
           (:lport (:list nil nil nil nil nil nil nil nil nil nil))
           (:llegato nil)))
         (:add-slots
          ((:loffset
            (:list
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)))
           (:lchan
            (:list
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)))
           (:lport (:list nil nil nil nil nil nil nil nil nil nil))
           (:llegato nil)))))
       (:value
        (:object
         (:class chord-seq)
         (:slots
          ((:onset 100)
           (:duration 10000)
           (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))
           (:symbolic-date nil)
           (:symbolic-dur nil)
           (:symbolic-dur-extent 0)
           (:lmidic
            (:list
             (:list 6000)
             (:list 6200)
             (:list 6300)
             (:list 6500)
             (:list 6700)
             (:list 6800)
             (:list 6900)
             (:list 7100)
             (:list 7300)
             (:list 7500)))
           (:lonset
            (:list
             0
             1000
             2000
             3000
             4000
             5000
             6000
             7000
             8000
             9000
             10000))
           (:ldur
            (:list
             (:list 1000)
             (:list 1000)
             (:list 1000)
             (:list 1000)
             (:list 1000)
             (:list 1000)
             (:list 1000)
             (:list 1000)
             (:list 1000)
             (:list 1000)))
           (:lvel
            (:list
             (:list 90)
             (:list 90)
             (:list 90)
             (:list 90)
             (:list 90)
             (:list 90)
             (:list 90)
             (:list 90)
             (:list 90)
             (:list 90)))
           (:loffset
            (:list
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)))
           (:lchan
            (:list
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)))
           (:lport (:list nil nil nil nil nil nil nil nil nil nil))
           (:llegato nil)))
         (:add-slots
          ((:loffset
            (:list
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)))
           (:lchan
            (:list
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)))
           (:lport (:list nil nil nil nil nil nil nil nil nil nil))
           (:llegato nil)))))
       (:id 0))
      (:box
       (:type :object)
       (:reference midievent)
       (:group-id 2)
       (:name nil)
       (:x 0)
       (:y 66)
       (:w 1000)
       (:h 40)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:name nil)
       (:display :text)
       (:showname nil)
       (:group-id 2)
       (:lock :locked)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "SELF")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "EV-TYPE")
         (:value :keyon)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "EV-CHAN")
         (:value 1)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "EV-PORT")
         (:value 0)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "EV-VALUE")
         (:value 0)
         (:reactive nil)))
       (:outputs
        (:output (:name "SELF") (:reactive nil))
        (:output (:name "EV-TYPE") (:reactive nil))
        (:output (:name "EV-CHAN") (:reactive nil))
        (:output (:name "EV-PORT") (:reactive nil))
        (:output (:name "EV-VALUE") (:reactive nil)))
       (:window (:size (nil nil)) (:position (nil nil)))
       (:edition-params)
       (:value
        (:object
         (:class midievent)
         (:slots
          ((:onset 0)
           (:item-time nil)
           (:item-internal-time nil)
           (:item-type nil)
           (:attributes nil)
           (:ev-type :progchange)
           (:ev-chan 1)
           (:ev-port 0)
           (:ev-value 12)))
         (:add-slots ((:ev-track 0)))))
       (:value
        (:object
         (:class midievent)
         (:slots
          ((:onset 0)
           (:item-time nil)
           (:item-internal-time nil)
           (:item-type nil)
           (:attributes nil)
           (:ev-type :progchange)
           (:ev-chan 1)
           (:ev-port 0)
           (:ev-value 12)))
         (:add-slots ((:ev-track 0)))))
       (:id 1))
      (:box
       (:type :object)
       (:reference midievent)
       (:group-id 3)
       (:name nil)
       (:x 2046)
       (:y 99)
       (:w 1000)
       (:h 40)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:name nil)
       (:display :text)
       (:showname nil)
       (:group-id 3)
       (:lock :locked)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "SELF")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "EV-TYPE")
         (:value :keyon)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "EV-CHAN")
         (:value 1)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "EV-PORT")
         (:value 0)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "EV-VALUE")
         (:value 0)
         (:reactive nil)))
       (:outputs
        (:output (:name "SELF") (:reactive nil))
        (:output (:name "EV-TYPE") (:reactive nil))
        (:output (:name "EV-CHAN") (:reactive nil))
        (:output (:name "EV-PORT") (:reactive nil))
        (:output (:name "EV-VALUE") (:reactive nil)))
       (:window (:size (nil nil)) (:position (nil nil)))
       (:edition-params)
       (:value
        (:object
         (:class midievent)
         (:slots
          ((:onset 2046)
           (:item-time nil)
           (:item-internal-time nil)
           (:item-type nil)
           (:attributes nil)
           (:ev-type :progchange)
           (:ev-chan 1)
           (:ev-port 0)
           (:ev-value 56)))
         (:add-slots ((:ev-track 0)))))
       (:value
        (:object
         (:class midievent)
         (:slots
          ((:onset 2046)
           (:item-time nil)
           (:item-internal-time nil)
           (:item-type nil)
           (:attributes nil)
           (:ev-type :progchange)
           (:ev-chan 1)
           (:ev-port 0)
           (:ev-value 56)))
         (:add-slots ((:ev-track 0)))))
       (:id 2)))
     (:connections)
     (:range (:x1 0 :x2 10100 :y1 -10 :y2 110))
     (:control-patch
      (:patch
       (:om-version 0.04)
       (:name "Control Patch")
       (:doc "")
       (:info (:created nil) (:modified nil))
       (:window (:size nil) (:position nil))
       (:grid nil)
       (:lock nil)
       (:boxes
        (:box
         (:type :io)
         (:reference
          (:in
           (:type ommaqin)
           (:index 0)
           (:name "MAQUETTE")
           (:doc "")))
         (:group-id nil)
         (:name "MAQUETTE")
         (:x 150)
         (:y 12)
         (:w 83)
         (:h 42)
         (:color
          (:color-or-nil
           (:color (:color 1.0 1.0 1.0 0.0))
           (:t-or-nil t)))
         (:border 0)
         (:roundness 0)
         (:text-font nil)
         (:align :center)
         (:icon :top)
         (:inputs)
         (:outputs (:output (:name "out") (:reactive nil)))
         (:id 0))
        (:box
         (:type :io)
         (:reference
          (:out (:type omout) (:name "out") (:index 1) (:doc "")))
         (:group-id nil)
         (:name "out")
         (:x 137)
         (:y 207)
         (:w 40)
         (:h 42)
         (:color
          (:color-or-nil
           (:color (:color 1.0 1.0 1.0 0.0))
           (:t-or-nil t)))
         (:border 0)
         (:roundness 0)
         (:text-font nil)
         (:align :center)
         (:icon :top)
         (:inputs
          (:input
           (:type :standard)
           (:name "out-value")
           (:value nil)
           (:reactive nil)))
         (:outputs)
         (:id 1))
        (:comment
         (:x 10)
         (:y 40)
         (:w 120)
         (:h 120)
         (:fgcolor nil)
         (:bgcolor nil)
         (:border nil)
         (:roundness nil)
         (:text-font nil)
         (:align nil)
         (:text
          "This patch is a general controller for the maquette...

Additional inputs/outputs are accesses on the maquette box.
")
         (:id 2)))
       (:connections
        (:connection
         (:from (:box 0 :out 0))
         (:to (:box 1 :in 0))
         (:attributes (:color nil :style nil :modif nil)))
        (:connection
         (:from (:box 0 :out 0))
         (:to (:box 1 :in 0))
         (:attributes (:color nil :style nil :modif nil))))))))
   (:group-id nil)
   (:name "maquette")
   (:x 459)
   (:y 644)
   (:w 119)
   (:h 81)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :mini-view)
   (:group-id nil)
   (:lock nil)
   (:lambda nil)
   (:pre-delay 0)
   (:inputs
    (:input
     (:type :optional)
     (:name "time")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "objs")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 2))
  (:box
   (:type :function)
   (:reference control-change)
   (:group-id nil)
   (:name "control-change")
   (:x 395)
   (:y 71)
   (:w 112)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "CTRL")
     (:value 10)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 3))
  (:box
   (:type :function)
   (:reference gm-program)
   (:group-id nil)
   (:name "gm-program")
   (:x 52)
   (:y 103)
   (:w 99)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "PROGNAME")
     (:value 11)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 4))
  (:box
   (:type :function)
   (:reference gm-program)
   (:group-id nil)
   (:name "gm-program")
   (:x 674)
   (:y 355)
   (:w 99)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "PROGNAME")
     (:value 56)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 5))
  (:box
   (:type :function)
   (:reference gm-program)
   (:group-id nil)
   (:name "gm-program")
   (:x 587)
   (:y 393)
   (:w 99)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "PROGNAME")
     (:value 12)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 6))
  (:comment
   (:x 140)
   (:y 670)
   (:w 302)
   (:h 34)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font (:font (:face "Verdana") (:size 10) (:style :plain)))
   (:align nil)
   (:text
    "The MidiEvents are put in the maquette with other objects (double-click on \"maquette\" to see the result)")
   (:id 7))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "aux12")
   (:x 362)
   (:y 583)
   (:w 80)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value (:list 100 0 3000))
   (:id 8))
  (:box
   (:type :function)
   (:reference list)
   (:group-id nil)
   (:name "list")
   (:x 486)
   (:y 583)
   (:w 113)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input (:type :optional) (:name "x") (:value nil) (:reactive nil))
    (:input (:type :optional) (:name "x") (:value nil) (:reactive nil))
    (:input
     (:type :optional)
     (:name "x")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 9))
  (:box
   (:type :object)
   (:reference chord-seq)
   (:group-id nil)
   (:name "CHORD-SEQ")
   (:x 383)
   (:y 479)
   (:w 117)
   (:h 77)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:name "CHORD-SEQ")
   (:display :mini-view)
   (:showname nil)
   (:show-markers t)
   (:group-id nil)
   (:lock :locked)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LMIDIC")
     (:value (:list 6000 6200 6300 6500 6700 6800 6900 7100 7300 7500))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LONSET")
     (:value (:list 0 1000))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LDUR")
     (:value (:list 1000))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LVEL")
     (:value (:list 90))
     (:reactive nil))
    (:input
     (:type :key)
     (:name "loffset")
     (:value (:list 0))
     (:reactive nil))
    (:input
     (:type :key)
     (:name "lchan")
     (:value (:list 1))
     (:reactive nil))
    (:input (:type :key) (:name "llegato") (:value 0) (:reactive nil)))
   (:outputs
    (:output (:name "SELF") (:reactive nil))
    (:output (:name "LMIDIC") (:reactive nil))
    (:output (:name "LONSET") (:reactive nil))
    (:output (:name "LDUR") (:reactive nil))
    (:output (:name "LVEL") (:reactive nil))
    (:output (:name "loffset") (:reactive nil))
    (:output (:name "lchan") (:reactive nil))
    (:output (:name "llegato") (:reactive nil)))
   (:window (:size (nil nil)) (:position (nil nil)))
   (:edition-params (:staff :g))
   (:value
    (:object
     (:class chord-seq)
     (:slots
      ((:onset 100)
       (:duration 10000)
       (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))
       (:symbolic-date nil)
       (:symbolic-dur nil)
       (:symbolic-dur-extent 0)
       (:lmidic
        (:list
         (:list 6000)
         (:list 6200)
         (:list 6300)
         (:list 6500)
         (:list 6700)
         (:list 6800)
         (:list 6900)
         (:list 7100)
         (:list 7300)
         (:list 7500)))
       (:lonset
        (:list 0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000))
       (:ldur
        (:list
         (:list 1000)
         (:list 1000)
         (:list 1000)
         (:list 1000)
         (:list 1000)
         (:list 1000)
         (:list 1000)
         (:list 1000)
         (:list 1000)
         (:list 1000)))
       (:lvel
        (:list
         (:list 90)
         (:list 90)
         (:list 90)
         (:list 90)
         (:list 90)
         (:list 90)
         (:list 90)
         (:list 90)
         (:list 90)
         (:list 90)))
       (:loffset
        (:list
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)))
       (:lchan
        (:list
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)))
       (:lport (:list nil nil nil nil nil nil nil nil nil nil))
       (:llegato nil)))
     (:add-slots
      ((:loffset
        (:list
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)))
       (:lchan
        (:list
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)))
       (:lport (:list nil nil nil nil nil nil nil nil nil nil))
       (:llegato nil)))))
   (:id 10))
  (:comment
   (:x 39)
   (:y 479)
   (:w 295)
   (:h 32)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font (:font (:face "Verdana") (:size 10) (:style :plain)))
   (:align nil)
   (:text
    "Example :
Change program of a channel while playing a maquette ")
   (:id 11))
  (:comment
   (:x 39)
   (:y 384)
   (:w 214)
   (:h 23)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font
    (:font-or-nil
     (:font (:font (:face "Verdana") (:size 12) (:style :bold)))
     (:t-or-nil t)))
   (:align nil)
   (:text "Construct a MidiEvent object :")
   (:id 12))
  (:comment
   (:x 203)
   (:y 509)
   (:w 147)
   (:h 47)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font (:font (:face "Verdana") (:size 10) (:style :plain)))
   (:align nil)
   (:text "A Chord-seq and two program change events -->")
   (:id 13))
  (:comment
   (:x 39)
   (:y 409)
   (:w 311)
   (:h 32)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font (:font (:face "Verdana") (:size 10) (:style :plain)))
   (:align nil)
   (:text
    "Set parametters (type, date, track, port, channel, value(s).
MidiEvent must be evaluated before sending.")
   (:id 14))
  (:comment
   (:x 618)
   (:y 231)
   (:w 155)
   (:h 57)
   (:fgcolor (:color 23/51 16/255 16/255 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font (:font (:face "Verdana") (:size 10) (:style :plain)))
   (:align nil)
   (:text
    "Try to play this note (set to channel 1) (\"P\" key) several times with sending midi events between each time")
   (:id 15))
  (:comment
   (:x 525)
   (:y 175)
   (:w 29)
   (:h 26)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font (:font (:face "Verdana") (:size 10) (:style :bold)))
   (:align nil)
   (:text "...")
   (:id 16))
  (:comment
   (:x 415)
   (:y 231)
   (:w 132)
   (:h 61)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font (:font (:face "Verdana") (:size 10) (:style :plain)))
   (:align nil)
   (:text
    "Send a ControlChange event for a channel
(e.g. : control Change 10 = pan)")
   (:id 17))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "aux7")
   (:x 454)
   (:y 103)
   (:w 34)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 20)
   (:id 18))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "aux6")
   (:x 477)
   (:y 136)
   (:w 32)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 1)
   (:id 19))
  (:box
   (:type :function)
   (:reference ctrlchg)
   (:group-id nil)
   (:name "CTRLCHG")
   (:x 435)
   (:y 169)
   (:w 83)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "CTRLNUM")
     (:value 7)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "VAL")
     (:value 100)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "CHANS")
     (:value 1)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 20))
  (:comment
   (:x 292)
   (:y 231)
   (:w 101)
   (:h 52)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font (:font (:face "Verdana") (:size 10) (:style :plain)))
   (:align nil)
   (:text "Change PitchBend for a channel")
   (:id 21))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "aux5")
   (:x 306)
   (:y 139)
   (:w 34)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 64)
   (:id 22))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "aux4")
   (:x 343)
   (:y 139)
   (:w 32)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 1)
   (:id 23))
  (:box
   (:type :function)
   (:reference pitchbend)
   (:group-id nil)
   (:name "PITCHBEND")
   (:x 299)
   (:y 169)
   (:w 94)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "VALS")
     (:value 0)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "CHANS")
     (:value 1)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 24))
  (:comment
   (:x 196)
   (:y 231)
   (:w 83)
   (:h 62)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font (:font (:face "Verdana") (:size 10) (:style :plain)))
   (:align nil)
   (:text "Change volume for a channel")
   (:id 25))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "aux3")
   (:x 211)
   (:y 138)
   (:w 41)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 100)
   (:id 26))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "aux2")
   (:x 247)
   (:y 103)
   (:w 32)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 1)
   (:id 27))
  (:box
   (:type :function)
   (:reference volume)
   (:group-id nil)
   (:name "VOLUME")
   (:x 211)
   (:y 169)
   (:w 82)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "VOLUME")
     (:value 100)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "CHANS")
     (:value 1)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 28))
  (:comment
   (:x 70)
   (:y 231)
   (:w 102)
   (:h 62)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font (:font (:face "Verdana") (:size 10) (:style :plain)))
   (:align nil)
   (:text "Change Midi program (instrument) for a channel")
   (:id 29))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "aux")
   (:x 140)
   (:y 138)
   (:w 32)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 1)
   (:id 30))
  (:box
   (:type :function)
   (:reference pgmout)
   (:group-id nil)
   (:name "PGMOUT")
   (:x 103)
   (:y 169)
   (:w 84)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "PROGM")
     (:value 2)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "CHANS")
     (:value 15)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 31))
  (:comment
   (:x 52)
   (:y 54)
   (:w 333)
   (:h 24)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font (:font (:face "Verdana") (:size 10) (:style :plain)))
   (:align nil)
   (:text
    "Send a midi event dynamicly evaluating the following boxes :")
   (:id 32))
  (:comment
   (:x 351)
   (:y 13)
   (:w 215)
   (:h 41)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font (:font (:face "Verdana") (:size 14) (:style :bold)))
   (:align nil)
   (:text "Using MIDI events")
   (:id 33))
  (:box
   (:type :function)
   (:reference midi-type)
   (:group-id nil)
   (:name "midi-type")
   (:x 485)
   (:y 393)
   (:w 85)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "EVT")
     (:value :progchange)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 34))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "value box")
   (:x 708)
   (:y 322)
   (:w 32)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 56)
   (:id 35))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "value box")
   (:x 621)
   (:y 375)
   (:w 32)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 12)
   (:id 36))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "value box")
   (:x 681)
   (:y 82)
   (:w 32)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 1)
   (:id 37))
  (:box
   (:type :object)
   (:reference note)
   (:group-id nil)
   (:name nil)
   (:x 631)
   (:y 133)
   (:w 88)
   (:h 74)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:name nil)
   (:display :mini-view)
   (:showname nil)
   (:show-markers t)
   (:group-id nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "MIDIC")
     (:value 6000)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "VEL")
     (:value 80)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "DUR")
     (:value 1000)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "CHAN")
     (:value 1)
     (:reactive nil)))
   (:outputs
    (:output (:name "SELF") (:reactive nil))
    (:output (:name "MIDIC") (:reactive nil))
    (:output (:name "VEL") (:reactive nil))
    (:output (:name "DUR") (:reactive nil))
    (:output (:name "CHAN") (:reactive nil)))
   (:window (:size (nil nil)) (:position (nil nil)))
   (:edition-params)
   (:value
    (:object
     (:class note)
     (:slots
      ((:symbolic-date nil)
       (:symbolic-dur nil)
       (:symbolic-dur-extent 0)
       (:midic 6000)
       (:vel 80)
       (:dur 1000)
       (:chan 1)
       (:port nil)
       (:offset 0)))
     (:add-slots ((:port nil)))))
   (:id 38))
  (:comment
   (:x 723)
   (:y 479)
   (:w 70)
   (:h 20)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font (:font (:face "Verdana") (:size 10) (:style :plain)))
   (:align nil)
   (:text
    "MIDIEVENT
")
   (:id 39)))
 (:connections
  (:connection
   (:from (:box 0 :out 0))
   (:to (:box 9 :in 2))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 1 :out 0))
   (:to (:box 9 :in 1))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 3 :out 0))
   (:to (:box 20 :in 0))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 4 :out 0))
   (:to (:box 31 :in 0))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 5 :out 0))
   (:to (:box 0 :in 4))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 6 :out 0))
   (:to (:box 1 :in 4))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 8 :out 0))
   (:to (:box 2 :in 0))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 9 :out 0))
   (:to (:box 2 :in 1))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 10 :out 0))
   (:to (:box 9 :in 0))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 18 :out 0))
   (:to (:box 20 :in 1))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 19 :out 0))
   (:to (:box 20 :in 2))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 22 :out 0))
   (:to (:box 24 :in 0))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 23 :out 0))
   (:to (:box 24 :in 1))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 26 :out 0))
   (:to (:box 28 :in 0))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 27 :out 0))
   (:to (:box 28 :in 1))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 30 :out 0))
   (:to (:box 31 :in 1))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 34 :out 0))
   (:to (:box 0 :in 1))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 34 :out 0))
   (:to (:box 1 :in 1))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 35 :out 0))
   (:to (:box 5 :in 0))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 36 :out 0))
   (:to (:box 6 :in 0))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 37 :out 0))
   (:to (:box 38 :in 4))
   (:attributes (:color nil :style nil :modif nil)))))